require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('react-native-permissions/package.json')"`), "scripts/setup") # Add this line for react-native-permissions
require 'json'

# Load Podfile properties
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

# Set environment variables
ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

# Override the default `use_native_modules!` method to support Expo's autolinking
use_autolinking_method_symbol = ('use' + '_native' + '_modules!').to_sym
origin_autolinking_method = self.method(use_autolinking_method_symbol)
self.define_singleton_method(use_autolinking_method_symbol) do |*args|
  if ENV['EXPO_UNSTABLE_CORE_AUTOLINKING'] == '1'
    Pod::UI.puts('Using expo-modules-autolinking as core autolinking source'.green)
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
    origin_autolinking_method.call(config_command)
  else
    origin_autolinking_method.call()
  end
end

# Set iOS deployment target
platform :ios, podfile_properties['ios.deploymentTarget'] || '13.4'

# Install CocoaPods with deterministic UUIDs disabled
install! 'cocoapods',
  :deterministic_uuids => false

# Prepare React Native project
prepare_react_native_project!

# Target definition
target 'WomenUser' do
  use_expo_modules!
  config = use_native_modules!

  # Setup permissions using react-native-permissions
  setup_permissions([
    'Contacts', # Required for accessing contacts
    'Camera', # Required for accessing the camera
    'LocationAlways', # Required for always-on location access
    'LocationWhenInUse', # Required for location access while the app is in use
    'Microphone', # Required for accessing the microphone
    'PhotoLibrary', # Required for accessing the photo library
    # Uncomment and add other permissions as needed:
    # 'AppTrackingTransparency',
    # 'Bluetooth',
    # 'Calendars',
    # 'CalendarsWriteOnly',
    # 'FaceID',
    # 'LocationAccuracy',
    # 'MediaLibrary',
    # 'Motion',
    # 'Notifications',
    # 'PhotoLibraryAddOnly',
    # 'Reminders',
    # 'Siri',
    'SpeechRecognition',
    # 'StoreKit',
  ])

  # Firebase-related pods (your existing configuration)
  # --------------- written By Me because firebase needs its own headers instead of getting from internet---------
  pod 'Firebase', :modular_headers => true
  pod 'FirebaseCoreInternal', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'Firebase/Messaging', :modular_headers => true
  pod 'FirebaseInAppMessaging', '~> 11.8.0-beta', :modular_headers => true
  pod 'FirebaseABTesting', :modular_headers => true
  pod 'FirebaseInstallations', :modular_headers => true
  pod 'nanopb', :modular_headers => true

  # Use frameworks if specified in Podfile.properties.json or environment variables
  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  # Use React Native with Hermes enabled by default
  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  # Post-install script
  post_install do |installer|
    # Exclude arm64 architecture for simulator builds
    installer.pods_project.build_configurations.each do |config|
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
    end

    # Additional Firebase-related logic
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Handle resource bundle signing
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end

  # Post-integrate script
  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
end